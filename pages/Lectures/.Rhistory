cc <- coef(r)
View(cc)
l <- r$lambda
l
log(3)
r <- cv.glmnet(x_poly, y, alpha = 0)
plot(r, xvar = "lambda")
min(r$cvm)       # minimum MSE
## [1] 0.02147691
r$lambda.min     # lambda for this min MSE
library(R.matlab)
data <- readMat("/home/khashaa/Dropbox/Machine Learning/courseraNG/machine-learning-ex6/ex6/ex6data1.mat")
View(data)
y <- data$y
X <- data$X
```{r}
library(R.matlab)
data <- readMat("/home/khashaa/Dropbox/Machine Learning/courseraNG/machine-learning-ex6/ex6/ex6data1.mat")
X <- data$X
y <- data$y
plot(y, X[,1])
plot(X[,2], X[,1])
plot(X[,1][y==1], X[,2[y==1]])
plot(X[,1][y==1], X[,2][y==1])
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=19)
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=19, xlab = "", ylab="")
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=19, xlab = "", ylab="", alpha=0.5)
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=19, xlab = "", ylab="")
points(X[,1][y==0], X[,2][y==0], col="blue")
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=19, xlab = "", ylab="")
points(X[,1][y==0], X[,2][y==0], col="blue")
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=19, xlab = "", ylab="", ylim = c(1, 5))
points(X[,1][y==0], X[,2][y==0], col="blue")
points(X[,1][y==0], X[,2][y==0], col="blue", pch=20)
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=19, xlab = "", ylab="", ylim = c(1, 5))
points(X[,1][y==0], X[,2][y==0], col="blue", pch=20)
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=3, xlab = "", ylab="", ylim = c(1, 5))
points(X[,1][y==0], X[,2][y==0], col="blue", pch=20)
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=3, xlab = "", ylab="", ylim = c(1, 5))
points(X[,1][y==0], X[,2][y==0], col="blue", pch=21)
library(lubridate)
ymd(2013)
year(2013)
year("2013")
df <- data.frame(date=c(2013, 2014), m=c(1, 1), s=c(2,3))
df
ts(df)
ts(df, start = (2013), frequency = 1)
AMC1csv <- ts(df, start = (2013), frequency = 1)
load("ch10data.Rdata")
library(dplyr)
library(magrittr)
library(lubridate)
year("2013")
View(AMC1csv)
plot.ts(AMC1csv)
plot(df)
load("ch10data.Rdata")
library(dplyr)
library(magrittr)
library(lubridate)
library(forecast)
estimation_data <- ch10data %>%
filter(date > as.Date("1967-12-01") & date < as.Date("1994-12-01"))
estimation_data %<>% mutate(lsales = log(liquor))
load("ch10data.Rdata")
library(dplyr)
library(magrittr)
library(lubridate)
library(forecast)
estimation_data <- ch10data %>%
filter(date > as.Date("1967-12-01") & date < as.Date("1994-12-01"))
estimation_data %<>% mutate(lsales = log(liquor))
plot(estimation_data$date, estimation_data$liquor, type="l")
mat <- matrix(c(1, 2, NA, 3, NA,
2, 5, NA, 4, 5,
3, 2,  1, 0, 7,
5, 3, NA, 9, 3,
0, 2,  1, 4, 6), 5, byrow = TRUE)
categ <- apply(is.na(mat), 1, which)
match(categ, unique(categ))
categ
unique(categ)
match(categ, unique(categ))
split = split_pdf('/home/khashaa/Downloads/Jeffrey M. Wooldridge - Introductory Econometrics_ A Modern Approach-Cengage Learning (2012).pdf')
install.packages("tabulizer")
library(tabulizer)
install.packages("pdftools")
install.packages("pdftools")
library(pdftools)
# extract some pages
pdf_subset('https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf',
pages = 1:3, output = "subset.pdf")
# Should say 3
pdf_length("subset.pdf")
# extract some pages
pdf_subset('/home/khashaa/Downloads/Jeffrey M. Wooldridge - Introductory Econometrics_ A Modern Approach-Cengage Learning (2012).pdf',)
# extract some pages
pdf_subset('/home/khashaa/Downloads/Jeffrey M. Wooldridge - Introductory Econometrics_ A Modern Approach-Cengage Learning (2012).pdf',pages = 1:3, output = "subset.pdf")
# Should say 3
pdf_length("subset.pdf")
# extract some pages
pdf_subset('/home/khashaa/Downloads/Jeffrey M. Wooldridge - Introductory Econometrics_ A Modern Approach-Cengage Learning (2012).pdf',
pages = 750:782, output = "subset.pdf")
# Should say 3
pdf_length("subset.pdf")
integer(1)
library(highcharter)
library(forecast)
load("ch10data.Rdata")
setwd("~/ecn321/pages/Lectures")
library(highcharter)
library(forecast)
load("ch10data.Rdata")
library(dplyr)
library(magrittr)
library(lubridate)
estimation_data <- ch10data %>%
filter(date > as.Date("1967-12-01") & date < as.Date("1994-12-01"))
estimation_data %<>% mutate(lsales = log(liquor))
y <- estimation_data$lsales
library(xts)
liq <- xts::xts(estimation_data[,1], order.by=estimation_data[,2])
lsales <- xts(estimation_data[,3], order.by=estimation_data[,2])
highchart(type = "stock") %>%
hc_add_series(liq, color = "cornflowerblue") %>%
hc_yAxis(title = list(text = "Monthly liquor sell"),
labels = list(format = "${value}"),
opposite = FALSE) %>%
hc_add_theme(hc_theme_flat())
highchart(type = "stock") %>%
hc_add_series(lsales, color = "cornflowerblue") %>%
hc_yAxis(title = list(text = "Log of Monthly liquor sell"),
labels = list(format = "{value}"),
opposite = FALSE) %>%
hc_add_theme(hc_theme_flat())
auto.arima(lsales) %>%
forecast(h = 6) %>%
hchart() %>%
hc_title(text = "Log of Monthly liquor sell") %>%
hc_yAxis(title = list(text = "monthly price"),
labels = list(format = "{value}"),
opposite = FALSE) %>%
hc_add_theme(hc_theme_flat()) %>%
hc_navigator(enabled = TRUE)
simulate_logit <- function(X, beta){
N <- nrow(X)
J <- 2
e <- matrix(evd::rgev(J * N), nrow = N, ncol = J)
a <- cbind(beta, 0 * beta)
u <- X %*% a + e
J - max.col(u)
}
set.seed(1)
N <- 1e3L
Beta <- c(0.5, 0.5)
income <- rnorm(N); x <- cbind(1, income)
y <- SimulateBinaryLogit(x, Beta)
negloglik <- function(beta, y, X){
ev <- exp(X %*% beta)
p <- ev / (1 + ev)
-sum(y * log(p) + (1 - y)*log(1 - p))
}
library(R.matlab)
data <- readMat("/home/khashaa/Dropbox/Machine Learning/courseraNG/machine-learning-ex6/ex6/ex6data1.mat")
X <- data$X
y <- data$y
library(R.matlab)
data <- readMat("/home/khashaa/Dropbox/Machine Learning/courseraNG/machine-learning-ex6/ex6/ex6data1.mat")
X <- data$X
y <- data$y
library(R.matlab)
data <- readMat("/home/khashaa/Dropbox/Machine Learning/courseraNG/machine-learning-ex6/ex6/ex6data1.mat")
X <- data$X
y <- data$y
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=3, xlab = "", ylab="", ylim = c(1, 5))
points(X[,1][y==0], X[,2][y==0], col="blue", pch=21)
install.packages("tint")
simulate_logit <- function(X, beta){
N <- nrow(X)
J <- 2
e <- matrix(evd::rgev(J * N), nrow = N, ncol = J)
a <- cbind(beta, 0 * beta)
u <- X %*% a + e
J - max.col(u)
}
setwd("~/ecn321/pages/Lectures")
simulate_logit <- function(X, beta){
N <- nrow(X)
J <- 2
e <- matrix(evd::rgev(J * N), nrow = N, ncol = J)
a <- cbind(beta, 0 * beta)
u <- X %*% a + e
J - max.col(u)
}
N <- nrow(X)
J <- ncol(X)
e <- matrix(evd::rgev(J * N), nrow = N, ncol = J)
a <- cbind(beta, 0 * beta)
simulate_logit <- function(X, beta){
N <- nrow(X)
J <- ncol(X)
e <- matrix(evd::rgev(J * N), nrow = N, ncol = J)
a <- cbind(beta, 0 * beta)
u <- X %*% a + e
J - max.col(u)
}
View(simulate_logit)
SimulateBinaryLogit <- function(X, beta){
N <- nrow(X)
J <- ncol(X)
e <- matrix(evd::rgev(J * N), nrow = N, ncol = J)
a <- cbind(beta, 0 * beta)
u <- X %*% a + e
J - max.col(u)
}
set.seed(1)
N <- 1e3L
Beta <- c(0.5, 0.5)
income <- rnorm(N); x <- cbind(1, income)
y <- SimulateBinaryLogit(x, Beta)
negloglik <- function(beta, y, X){
ev <- exp(X %*% beta)
p <- ev / (1 + ev)
-sum(y * log(p) + (1 - y)*log(1 - p))
}
negloglik(beta=Beta, y=y, X=x)
optim(c(0, 0), negloglik,
y = y, X = x,
method = "BFGS",
hessian = TRUE)
simulated_loglik <- function(beta, y, X, R){
set.seed(1)
y_sim <- replicate(R, SimulateBinaryLogit(X, beta))
p_sim <- rowMeans(y_sim)
-sum(y * log(p_sim) + (1 - y) * log(1 - p_sim))
}
beta <- c(0.5, 0.5)
negloglik(beta, y, x) # exact loglikelihood (negative)
library(dplyr)
sim <- data.frame(number_simulation = 2^(6:13)) %>%
rowwise() %>%
mutate(simulated_LL = simulated_loglik(beta, y, x, number_simulation))
sim %>%  knitr::kable()
R <- 1000
optim(c(0, 0), simulated_loglik,
y = y, X = x, R = R,
method = "BFGS",
hessian = TRUE)
library(plotly)
a <- expand.grid(b1=seq(0,1, len=100), b2=seq(0,1, len=100)) %>% rowwise() %>%
mutate(l=negloglik(c(b1, b2), y=y, X=x))
a <- matrix(a$l, nrow=sqrt(nrow(a)))
plot_ly(x = seq(0,1, len=100), y = seq(0,1, len=100), z = a) %>% add_surface()
sim %>%  knitr::kable()
load("ch5data.Rdata")
library(dplyr)
mw16 <- ch5data %>%
filter(date >= as.Date("1955-01-01") & date<=as.Date("1993-12-01")) %>%
select(date, m16, w16) %>%
mutate(time  = row_number(),
time2 = time^2)
plot(m16 ~ date, data = mw16,
type = "l",
lwd  = 2,
xlab = "Time",
ylab = "Rate",
main = "Эрэгтэйчүүдийн хөдөлмөрийн зах зээлийн оролцоо")
reg_m16 <- lm(m16 ~ time, data = mw16)
plot(m16 ~ date, data = mw16,
type = "l",
lwd  = 2,
xlab = "Time",
ylab = "Rate",
main = "Эрэгтэйчүүдийн хөдөлмөрийн зах зээлийн оролцоо")
lines(mw16$date, fitted(reg_m16), col="red")
plot(residuals(reg_m16),
type = "l",
ylab = "residuals",
col  = "red")
points(residuals(reg_m16), col = "red", pch = 19)
hist(residuals(reg_m16), probability = TRUE,
main = "Histogram of Residuals",
col  = "steelblue4",
xlab = "Residuals")
reg_w16 <- lm(w16 ~ time, data = mw16)
plot(w16 ~ date, data = mw16,
type = "l",
lwd  = 2,
xlab = "Time",
ylab = "Rate",
main = "Эмэгтэйчүүдийн хөдөлмөрийн зах зээлийн оролцоо")
lines(mw16$date, fitted(reg_w16), col="red")
plot(residuals(reg_w16),
type = "l",
xlab = "Time",
ylab = "residuals",
col  = "red")
points(residuals(reg_w16), col = "red", pch = 19)
hist(residuals(reg_w16), probability = TRUE,
main = "Histogram of Residuals",
col  = "steelblue4",
xlab = "Residuals")
nyse <- ch5data %>%
filter(date >= as.Date("1955-01-01") & date<=as.Date("1993-12-01")) %>%
select(date, nysevol) %>%
mutate(time        = row_number(),
time2       = time^2)
reg1 <- lm(nysevol ~ time + time2, data = nyse)
reg2 <- nls(nysevol ~ beta0 * exp(beta1 * time), data = nyse ,
start = list(beta0 = 1000, beta1 = 0),
trace = TRUE)
plot(nysevol ~ date, data = nyse,
type = "l",
xlab = "Time",
ylab = "Volume", lwd = 2)
lines(nyse$date, fitted(reg1), col = "green4", lty = 2, lwd = 2)
lines(nyse$date, fitted(reg2), col = "steelblue4", lty = 3, lwd = 2)
legend("topleft", c("Actual", "Quadratic", "Exponential"),
lty = c(1, 1, 2),
col = c("black", "green4","steelblue4"))
plot(residuals(reg1), type = "l", xlab = "Time", col="green")
lines(residuals(reg2), col="blue")
hist(residuals(reg2), probability = TRUE,
main = "Histogram of Residuals",
col  = "steelblue4",
xlab = "Residuals")
nyse <- ch5data %>%
filter(date >= as.Date("1955-01-01") & date<=as.Date("1993-12-01")) %>%
select(date, nysevol) %>%
mutate(time        = row_number(),
time2       = time^2)
reg1 <- lm(nysevol ~ time + time2, data = nyse)
reg2 <- nls(nysevol ~ beta0 * exp(beta1 * time), data = nyse ,
start = list(beta0 = 1000, beta1 = 0))
plot(nysevol ~ date, data = nyse,
type = "l",
xlab = "Time",
ylab = "Volume", lwd = 2)
lines(nyse$date, fitted(reg1), col = "green4", lty = 2, lwd = 2)
lines(nyse$date, fitted(reg2), col = "steelblue4", lty = 3, lwd = 2)
legend("topleft", c("Actual", "Quadratic", "Exponential"),
lty = c(1, 1, 2),
col = c("black", "green4","steelblue4"))
plot(residuals(reg1), type = "l", xlab = "Time", col="green")
lines(residuals(reg2), col="blue")
hist(residuals(reg2), probability = TRUE,
main = "Histogram of Residuals",
col  = "steelblue4",
xlab = "Residuals")
loglinear <- lm(log(nysevol) ~ time, data = nyse)
plot(log(nysevol) ~ date, data = nyse,
type = "l",
lwd = 2,
xlab = "Time",
ylab = "Volume")
lines(nyse$date, fitted(loglinear), col="red4", lty=2)
legend("topleft", c("Actual", "Fitted"),
lty = c(1, 2),
col = c("black", "red4"))
plot(residuals(loglinear), type = "l",
xlab = "",
ylab = "",
main = "Residuals",
col  = "green4", )
hist(residuals(loglinear), probability = TRUE, breaks = 20,
main = "Histogram of Residuals",
col  = "steelblue4",
xlab = "Residuals")
RTRR <- ch5data %>%
select(date, rtrr) %>%
filter(date > as.Date("1954-12-01")) %>%
mutate(time        = row_number(),
time2       = time^2)
estimation_data <- RTRR %>% filter(date < as.Date("1994-01-01"))
evaluatuion_data <- RTRR %>% filter(date >= as.Date("1994-01-01"))
reg1 <- lm(rtrr ~ time, data = estimation_data)
reg2 <- lm(rtrr ~ time + time2, data = estimation_data)
reg3 <- nls(rtrr ~ beta0*exp(beta1*time), data = estimation_data,
start = list(beta0 = 1000, beta1 = 0))
plot(rtrr ~ date, data =  estimation_data,
type = "l",
lwd  = 2,
xlab = "Time",
ylab = "Sales",
main = "Monthly Retail Sales: 1955.01-1993.12")
lines(estimation_data$date, fitted(reg1), col = "blue", lty = 2)
lines(estimation_data$date, fitted(reg2), col="red", lty = 3, lwd = 2)
lines(estimation_data$date, fitted(reg3), col="green4", lty=4)
legend("topleft", c("Linear", "Quadratic", "Exponential"),
lty = c(2, 3, 4),
col = c("blue", "red", "green"))
plot_data <- RTRR %>%
filter(date > as.Date("1990-01-01") & date <= as.Date("1995-01-01"))
plot(plot_data$date, plot_data$rtrr,
type = "l",
lwd  = 2,
xlab = "Time",
ylab = "History, Forecasts, Realization",
main = "Monthly Retail Sales", ylim=c(110000, 200000))
polygon(c(as.Date("1994-01-01") ,  as.Date("1994-01-01"), as.Date("1995-01-01"), as.Date("1995-01-01")),
c(110000, 200000,  200000, 11000), col = "grey85", border = NA)
lines(plot_data$date, plot_data$rtrr, lwd = 2)
point_forecasts <- predict(reg1, evaluatuion_data) # shugaman trend zagvariin taamaglal
# interval forecasts
lower <- point_forecasts - 1.96*summary(reg1)$sigma
upper <- point_forecasts + 1.96*summary(reg1)$sigma
lines(point_forecasts, type = "l", lwd=2, col="red")
lines(evaluatuion_data$date , point_forecasts, type = "l", col = "red", lwd=2, lty=2)
lines(evaluatuion_data$date , lower, type = "l", col = "red", lty = 2)
lines(evaluatuion_data$date , upper, type = "l", col = "red", lty = 2)
reticulate::repl_python()
options(htmltools.dir.version = FALSE)
library(pacman)
p_load(
broom, here, tidyverse,
latex2exp, ggplot2, ggthemes, viridis, extrafont, gridExtra,
kableExtra,
data.table,
dplyr,
lubridate,
magrittr, knitr, parallel
)
# Define pink color
red_pink <- "#e64173"
turquoise <- "#20B2AA"
grey_light <- "grey70"
grey_mid <- "grey50"
grey_dark <- "grey20"
# Dark slate grey: #e64173
# Knitr options
opts_chunk$set(
comment = "#>",
fig.align = "center",
fig.height = 7,
fig.width = 10.5,
warning = F,
message = F
)
opts_chunk$set(dev = "svg")
options(device = function(file, width, height) {
svg(tempfile(), width = width, height = height)
})
# A blank theme for ggplot
theme_empty <- theme_bw() + theme(
line = element_blank(),
rect = element_blank(),
strip.text = element_blank(),
axis.text = element_blank(),
plot.title = element_blank(),
axis.title = element_blank(),
plot.margin = structure(c(0, 0, -0.5, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_simple <- theme_bw() + theme(
line = element_blank(),
panel.grid = element_blank(),
rect = element_blank(),
strip.text = element_blank(),
axis.text.x = element_text(size = 18, family = "STIXGeneral"),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_blank(),
axis.title = element_blank(),
# plot.margin = structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_axes_math <- theme_void() + theme(
text = element_text(family = "MathJax_Math"),
axis.title = element_text(size = 22),
axis.title.x = element_text(hjust = .95, margin = margin(0.15, 0, 0, 0, unit = "lines")),
axis.title.y = element_text(vjust = .95, margin = margin(0, 0.15, 0, 0, unit = "lines")),
axis.line = element_line(
color = "grey70",
size = 0.25,
arrow = arrow(angle = 30, length = unit(0.15, "inches")
)),
plot.margin = structure(c(1, 0, 1, 0), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_axes_serif <- theme_void() + theme(
text = element_text(family = "MathJax_Main"),
axis.title = element_text(size = 22),
axis.title.x = element_text(hjust = .95, margin = margin(0.15, 0, 0, 0, unit = "lines")),
axis.title.y = element_text(vjust = .95, margin = margin(0, 0.15, 0, 0, unit = "lines")),
axis.line = element_line(
color = "grey70",
size = 0.25,
arrow = arrow(angle = 30, length = unit(0.15, "inches")
)),
plot.margin = structure(c(1, 0, 1, 0), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_axes <- theme_void() + theme(
text = element_text(family = "Fira Sans Book"),
axis.title = element_text(size = 18),
axis.title.x = element_text(hjust = .95, margin = margin(0.15, 0, 0, 0, unit = "lines")),
axis.title.y = element_text(vjust = .95, margin = margin(0, 0.15, 0, 0, unit = "lines")),
axis.line = element_line(
color = grey_light,
size = 0.25,
arrow = arrow(angle = 30, length = unit(0.15, "inches")
)),
plot.margin = structure(c(1, 0, 1, 0), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_set(theme_gray(base_size = 20))
data("mtcars")
mtcars %>% filter(cyl==8) %>% lm(., mpg~wt)
data("mtcars")
mtcars %>% filter(cyl==8) %>% lm(mpg~wt,.)
mtcars %>% filter(cyl == 8) %>% lm(mpg~wt, .)
