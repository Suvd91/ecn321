xs <- polyFeatures(X, 8)
rowMeans(xs)
colMeans(xs)
sd <- matrixStats::colSds(xs)
nrow=nrow(xs), ncol=ncol(xs)
matrix(mu, nrow=nrow(xs), ncol=ncol(xs))
mu <- colMeans(xs)
sd <- matrixStats::colSds(xs)
matrix(mu, nrow=nrow(xs), ncol=ncol(xs))
matrix(mu, nrow=nrow(xs), ncol=ncol(xs), byrow = TRUE)
(xs - matrix(mu, nrow=nrow(xs), ncol=ncol(xs), byrow = TRUE))/matrix(sd, nrow=nrow(xs), ncol=ncol(xs), byrow = TRUE)
xspol <- (xs - matrix(mu, nrow=nrow(xs), ncol=ncol(xs), byrow = TRUE))/matrix(sd, nrow=nrow(xs), ncol=ncol(xs), byrow = TRUE)
View(xspol)
View(x_poly)
xm <- polyFeatures(Xtest, 8)
xm <- (xm - matrix(mu, nrow=nrow(xm), ncol=ncol(xm), byrow = TRUE))/matrix(sd, nrow=nrow(xm), ncol=ncol(xm), byrow = TRUE)
linearRegCostFunction(xm, ytest, theta3, 0)
linearRegCostFunction(cbind(1,xm), ytest, theta3, 0)
X <- data$X; y <- data$y
library(R.matlab)
data <- readMat("/home/khashaa/Dropbox/Machine Learning/courseraNG/machine-learning-ex5/ex5/ex5data1.mat")
X <- data$X; y <- data$y
Xtest <- data$Xtest; ytest <- data$ytest
Xval <- data$Xval; yval <- data$yval
library(glmnet)
glmnet(X, y)
plot(X, y,
pch = 19,
xlab = "Change in water level (x)", ylab = "Water flowing out of the dam",
col = "red")
linearRegCostFunction <- function(x, y, theta, lambda){
m <- length(y)
sum((y - x %*% theta)^2) / (2*m) + (lambda / (2*m)) * sum(theta[-1]^2)
}
x <- cbind(1, X)
linearRegCostFunction(x, y, theta=c(1, 1), lambda=1)
glmnet(x, y)
linearRegCostFunction <- function(x, y, theta, lambda){
m <- length(y)
sum((y - x %*% theta)^2) / (2*m) + (lambda / (2*m)) * sum(theta[-1]^2)
}
x <- cbind(1, X)
linearRegCostFunction(x, y, theta=c(1, 1), lambda=1)
grad <- function(x, y, theta, lambda){
m <- length(y)
c(t(x %*% theta-y)%*%x) / m + lambda/m * c(0, theta[-1])
}
grad(x, y, c(1,1), lambda=0)
trainLinearReg <- function(x, y, lambda, theta_init){
theta_init
optim(theta_init, linearRegCostFunction, gr=grad,x=x, y=y, lambda, method = "BFGS",
control = list(maxit = 200))
}
res <- trainLinearReg(x, y, lambda=0, theta_init = c(0, 0))
theta_hat <- res$par
y_hat <- x %*% theta_hat
theta_hat
plot(X, y,
pch = 19,
xlab = "Change in water level (x)", ylab = "Water flowing out of the dam",
col = "red", ylim = c(-5, 40))
lines(X, y_hat, col="blue", lty = 2)
learningCurve <- function(x, y, lambda, xval, yval, theta_init){
m <- length(y)
error_train <- rep(NA, m)
error_val <- rep(NA, m)
for(i in 1:m){
theta_hat <- trainLinearReg(x[1:i,], y[1:i], lambda, theta_init)$par
error_train[i] <- linearRegCostFunction(x[1:i,], y[1:i], theta_hat, lambda)
error_val[i] <- linearRegCostFunction(xval, yval, theta_hat, lambda)
}
data.frame(error_train, error_val)
}
plot(1:length(y), lc$error_train,
col = "blue4",
type = "l",
ylim = c(0, 200),
main = "Figure 3: Linear regression learning curve",
ylab = "Error", xlab = "Number of training examples")
xval <- cbind(1, Xval)
lc <- learningCurve(x, y, lambda=0, xval, yval, theta_init = c(0,0))
lc
plot(1:length(y), lc$error_train,
col = "blue4",
type = "l",
ylim = c(0, 200),
main = "Figure 3: Linear regression learning curve",
ylab = "Error", xlab = "Number of training examples")
lines(1:length(y), lc$error_val, col = "green4")
legend("topright", c("Train", "Cross Validation"), lty = c(1,1), lwd=2,
col = c("blue4", "green4"))
polyFeatures <- function(x, p){
res <- x
for(i in 2:p){
res <- cbind(res, x^i)
}
res
}
p = 8
x_poly <- cbind(1, apply(polyFeatures(X, p), 2, scale))
x_test_poly <- cbind(1, apply(polyFeatures(Xtest, p), 2, scale))
x_val_poly <- cbind(1, apply(polyFeatures(Xval, p), 2, scale))
res_poly <- trainLinearReg(x_poly, y, lambda = 0, theta_init = rep(0, ncol(x_poly)))
theta_hat <- res_poly$par
y_hat <- x_poly %*% theta_hat
theta_hat
plot(X, y,
pch = 19, main = "Polynomial Fit",
xlab = "Change in water level (x)", ylab = "Water flowing out of the dam",
col = "red", ylim = c(-56, 40))
lines(sort(X), y_hat[order(X)], col = "blue", lty = 2)
pol_lc <- learningCurve(x_poly, y, lambda=0, x_val_poly, yval, theta_init = rep(0,ncol(x_poly)))
plot(1:length(y), pol_lc$error_val,
col = "green4",
type = "l",
main = "Figure 5: Polynomial learning curve, lambda=0",
ylab = "Error", xlab = "Number of training examples", ylim=c(0, 160))
lines(1:length(y), pol_lc$error_train, col = "blue4")
legend("topright", c("Train", "Cross Validation"), lty = c(1,1), lwd=2,
col = c("blue4", "green4"))
res_poly <- trainLinearReg(x_poly, y, lambda = 1, theta_init = rep(0, ncol(x_poly)))
theta_hat <- res_poly$par
y_hat <- x_poly %*% theta_hat
theta_hat
plot(X, y,
pch = 19, main = "Figure 6. Polynomial Fit",
xlab = "Change in water level (x)", ylab = "Water flowing out of the dam",
col = "red", ylim = c(-56, 40))
lines(sort(X), y_hat[order(X)], col = "blue", lty = 2)
pol_lc1 <- learningCurve(x_poly, y, lambda=1, x_val_poly, yval, theta_init = rep(0,ncol(x_poly)))
plot(1:length(y), pol_lc1$error_val,
col = "green4",
type = "l",
main = "Figure 7: Polynomial regression learning curve",
ylab = "Error", xlab = "Number of training examples", ylim=c(0, 160))
lines(1:length(y), pol_lc1$error_train, col = "blue4")
legend("topright", c("Train", "Cross Validation"), lty = c(1,1), lwd=2,
col = c("blue4", "green4"))
res_poly <- trainLinearReg(x_poly, y, lambda = 100, theta_init = rep(0, ncol(x_poly)))
theta_hat <- res_poly$par
y_hat <- x_poly %*% theta_hat
theta_hat
plot(X, y,
pch = 19, main = "Figure 8. Polynomial Fit, lambda=100",
xlab = "Change in water level (x)", ylab = "Water flowing out of the dam",
col = "red", ylim = c(-10, 40))
lines(sort(X), y_hat[order(X)], col = "blue", lty = 2)
pol_lc100 <- learningCurve(x_poly, y, lambda=100, x_val_poly, yval, theta_init = rep(0, ncol(x_poly)))
plot(1:length(y), pol_lc100$error_val,
col = "green4",
type = "l",
main = "Figure 7: Polynomial regression learning curve",
ylab = "Error", xlab = "Number of training examples", ylim=c(0, 160))
lines(1:length(y), pol_lc100$error_train, col = "blue4")
legend("topright", c("Train", "Cross Validation"), lty = c(1,1), lwd=2,
col = c("blue4", "green4"))
lambda_vec <- c(0, 0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1, 3, 10)
validationCurve <- function(x, y, xval, yval, lambda_vec){
error_train <- rep(NA, length(lambda_vec))
error_val <- rep(NA, length(lambda_vec))
for(i in 1:length(lambda_vec)){
lambda_coef <- lambda_vec[i]
theta <- trainLinearReg(x, y, lambda_coef, theta_init = rep(0, ncol(x)))$par
error_train[i] = linearRegCostFunction(x, y, theta, lambda=0)
error_val[i] = linearRegCostFunction(xval, yval, theta, lambda=0)
}
data.frame(error_train, error_val)
}
vc <- validationCurve(x_poly, y, x_val_poly, yval, lambda_vec)
lambda_vec <- c(0, 0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1, 3, 10)
plot(lambda_vec, vc$error_train,
col = "blue4",
type = "l",
#ylim = c(0, 200),
main = "Figure 9: Selecting Î» using a cross validation set",
ylab = "Error", xlab = "lambda")
lines(lambda_vec, vc$error_val, col = "green4")
theta3 <- trainLinearReg(x_poly, y, lambda = 3, theta_init = rep(0, ncol(x_poly)))$par
linearRegCostFunction(x_test_poly, ytest, theta3, lambda=0)
theta3
glmnet(x, y, alpha = 0)
plot(glmnet(x, y, alpha = 0))
r <- glmnet(x, y, alpha = 0)
r <- plot(r, xvar = "lambda")
r <- glmnet(x_poly, y, alpha = 0)
r <- plot(r, xvar = "lambda")
log(3)
r
r <- glmnet(x_poly, y, alpha = 0)
plot(r, xvar = "lambda")
r
r$lambda
r$beta
coef(r)
r$lambda[100]
coef(r)[100]
cc <- coef(r)
r <- glmnet(x_poly[,-1], y, alpha = 0)
plot(r, xvar = "lambda")
r$lambda[100]
r$beta
r <- glmnet(x_poly, y, alpha = 0)
plot(r, xvar = "lambda")
r$lambda[100]
r$beta
cc <- coef(r)
View(cc)
l <- r$lambda
l
log(3)
r <- cv.glmnet(x_poly, y, alpha = 0)
plot(r, xvar = "lambda")
min(r$cvm)       # minimum MSE
## [1] 0.02147691
r$lambda.min     # lambda for this min MSE
library(R.matlab)
data <- readMat("/home/khashaa/Dropbox/Machine Learning/courseraNG/machine-learning-ex6/ex6/ex6data1.mat")
View(data)
y <- data$y
X <- data$X
```{r}
library(R.matlab)
data <- readMat("/home/khashaa/Dropbox/Machine Learning/courseraNG/machine-learning-ex6/ex6/ex6data1.mat")
X <- data$X
y <- data$y
plot(y, X[,1])
plot(X[,2], X[,1])
plot(X[,1][y==1], X[,2[y==1]])
plot(X[,1][y==1], X[,2][y==1])
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=19)
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=19, xlab = "", ylab="")
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=19, xlab = "", ylab="", alpha=0.5)
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=19, xlab = "", ylab="")
points(X[,1][y==0], X[,2][y==0], col="blue")
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=19, xlab = "", ylab="")
points(X[,1][y==0], X[,2][y==0], col="blue")
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=19, xlab = "", ylab="", ylim = c(1, 5))
points(X[,1][y==0], X[,2][y==0], col="blue")
points(X[,1][y==0], X[,2][y==0], col="blue", pch=20)
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=19, xlab = "", ylab="", ylim = c(1, 5))
points(X[,1][y==0], X[,2][y==0], col="blue", pch=20)
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=3, xlab = "", ylab="", ylim = c(1, 5))
points(X[,1][y==0], X[,2][y==0], col="blue", pch=20)
plot(X[,1][y==1], X[,2][y==1], main = "Figure1. Example Dataset1", col="red", pch=3, xlab = "", ylab="", ylim = c(1, 5))
points(X[,1][y==0], X[,2][y==0], col="blue", pch=21)
setwd("~/ecn321/pages/Lectures")
load('ch9data.Rdata')
load("ch7data.Rdata")
ch7data <- ch9data
ch9data <- ch7data
plot(chdata$date, ch9data$caemp, type = "l")
plot(chdata9$date, ch9data$caemp, type = "l")
ch9data <- ch7data
plot(chdata9$date, ch9data$caemp, type = "l")
plot(ch9data$date, ch9data$caemp, type = "l")
estimation_data <- ch9data %>%
filter(date < as.Date("1994-01-01") )
y <- estimation_data$caemp
ar2 <- arima(y, order=c(2,0,0))
ar2
load('ch9data.Rdata')
plot(ch9data$date, ch9data$caemp, type = "l")
estimation_data <- ch9data %>%
filter(date < as.Date("1994-01-01") )
library(dplyr)
plot(ch9data$date, ch9data$caemp, type = "l")
estimation_data <- ch9data %>%
filter(date < as.Date("1994-01-01") )
y <- estimation_data$caemp
ar2 <- arima(y, order=c(2,0,0))
ar2
library(forecast)
library(data.table)
setDT(ch9data)[, eval := date>as.Date("1993-04-01"),]
h <- sum(ch9data$eval)
fcst <- forecast(ar2, h=h)
ch9data$fit <- c(y-residuals(ar2), rep(NA, h-2))
ch9data[eval==TRUE, hi:=fcst$upper[,2],]
ch9data[eval==TRUE, lo:=fcst$lower[,2],]
ch9data[eval==TRUE, f:=fcst$mean,]
plot_data <-  ch9data %>% filter(date>as.Date("1989-12-01"))
plot(plot_data$date, plot_data$caemp, type='l', ylim=c(70, 120))
lines(plot_data$date, plot_data$fit, col="blue")
lines(plot_data$date, plot_data$f, col="red")
lines(plot_data$date, plot_data$hi, col="red", lty=2)
lines(plot_data$date, plot_data$lo, col="red", lty=2)
library(dygraphs)
a <- as.xts.data.table(as.data.table(ch9data))
dygraph(a, main = "Canadian Employment Index") %>%
dyRangeSelector() %>%
dySeries(name = "caemp", label = "Actual") %>%
dySeries(c("hi","f", "lo"), label = "Predicted") %>%
dyLegend(show = "always", hideOnMouseOut = FALSE) %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesOpts = list(strokeWidth = 2)) %>%
dyOptions(axisLineColor = "navy", gridLineColor = "grey")
load('ch9data.Rdata')
library(dplyr)
estimation_data <- ch9data %>%
filter(date < as.Date("1994-01-01") )
y <- estimation_data$caemp
ar2 <- arima(y, order=c(2,0,0))
ar2
library(forecast)
library(data.table)
setDT(ch9data)[, eval := date>as.Date("1993-04-01"),]
h <- sum(ch9data$eval)
fcst <- forecast(ar2, h=h)
ch9data$fit <- c(y-residuals(ar2), rep(NA, h-2))
ch9data[eval==TRUE, hi:=fcst$upper[,2],]
ch9data[eval==TRUE, lo:=fcst$lower[,2],]
ch9data[eval==TRUE, f:=fcst$mean,]
plot_data <-  ch9data %>% filter(date>as.Date("1989-12-01"))
plot(plot_data$date, plot_data$caemp, type='l', ylim=c(70, 120))
lines(plot_data$date, plot_data$fit, col="blue")
lines(plot_data$date, plot_data$f, col="red")
lines(plot_data$date, plot_data$hi, col="red", lty=2)
lines(plot_data$date, plot_data$lo, col="red", lty=2)
library(dygraphs)
a <- as.xts.data.table(as.data.table(ch9data))
dygraph(a, main = "Canadian Employment Index") %>%
dyRangeSelector() %>%
dySeries(name = "caemp", label = "Actual") %>%
dySeries(c("hi","f", "lo"), label = "Predicted") %>%
dyLegend(show = "always", hideOnMouseOut = FALSE) %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesOpts = list(strokeWidth = 2)) %>%
dyOptions(axisLineColor = "navy", gridLineColor = "grey")
load('ch9data.Rdata')
library(dplyr)
estimation_data <- ch9data %>%
filter(date < as.Date("1994-01-01") )
y <- estimation_data$caemp
ar2 <- arima(y, order=c(2,0,0))
library(forecast)
library(data.table)
setDT(ch9data)[, eval := date>as.Date("1993-04-01"),]
h <- sum(ch9data$eval)
fcst <- forecast(ar2, h=h)
ch9data$fit <- c(y-residuals(ar2), rep(NA, h-2))
ch9data[eval==TRUE, hi:=fcst$upper[,2],]
ch9data[eval==TRUE, lo:=fcst$lower[,2],]
ch9data[eval==TRUE, f:=fcst$mean,]
plot_data <-  ch9data %>% filter(date>as.Date("1989-12-01"))
plot(plot_data$date, plot_data$caemp, type='l', ylim=c(70, 120))
lines(plot_data$date, plot_data$fit, col="blue")
lines(plot_data$date, plot_data$f, col="red")
lines(plot_data$date, plot_data$hi, col="red", lty=2)
lines(plot_data$date, plot_data$lo, col="red", lty=2)
library(dygraphs)
a <- as.xts.data.table(as.data.table(ch9data))
dygraph(a, main = "Canadian Employment Index") %>%
dyRangeSelector() %>%
dySeries(name = "caemp", label = "Actual") %>%
dySeries(c("hi","f", "lo"), label = "Predicted") %>%
dyLegend(show = "always", hideOnMouseOut = FALSE) %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesOpts = list(strokeWidth = 2)) %>%
dyOptions(axisLineColor = "navy", gridLineColor = "grey")
ma4 <- arima(y, order=c(0,0,4))
fcst <- forecast(ma4, h=h)
ch9data$fit <- c(y-residuals(ma), rep(NA, h-2))
ch9data$fit1 <- c(y-residuals(ma), rep(NA, h-2))
ch9data$fit1 <- c(y-residuals(ma4), rep(NA, h-2))
ch9data$fit <- c(y-residuals(ma4), rep(NA, h-2))
ch9data[eval==TRUE, hi:=fcst$upper[,2],]
ch9data[eval==TRUE, lo:=fcst$lower[,2],]
ch9data[eval==TRUE, f:=fcst$mean,]
library(dygraphs)
a <- as.xts.data.table(as.data.table(ch9data))
dygraph(a, main = "Canadian Employment Index: AR(2) forecasts") %>%
dyRangeSelector() %>%
dySeries(name = "caemp", label = "Actual") %>%
dySeries(c("hi","f", "lo"), label = "Predicted") %>%
dyLegend(show = "always", hideOnMouseOut = FALSE) %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesOpts = list(strokeWidth = 2)) %>%
dyOptions(axisLineColor = "navy", gridLineColor = "grey")
load('ch9data.Rdata')
library(dplyr)
estimation_data <- ch9data %>%
filter(date < as.Date("1994-01-01") )
y <- estimation_data$caemp
ma4 <- arima(y, order=c(0,0,4))
fcst <- forecast(ma4, h=h)
ch9data$fit <- c(y-residuals(ma4), rep(NA, h-2))
ch9data[eval==TRUE, hi:=fcst$upper[,2],]
load('ch9data.Rdata')
library(dplyr)
estimation_data <- ch9data %>%
filter(date < as.Date("1994-01-01") )
library(forecast)
library(data.table)
setDT(ch9data)[, eval := date>as.Date("1993-04-01"),]
h <- sum(ch9data$eval)
y <- estimation_data$caemp
ma4 <- arima(y, order=c(0,0,4))
fcst <- forecast(ma4, h=h)
ch9data$fit <- c(y-residuals(ma4), rep(NA, h-2))
ch9data[eval==TRUE, hi:=fcst$upper[,2],]
ch9data[eval==TRUE, lo:=fcst$lower[,2],]
ch9data[eval==TRUE, f:=fcst$mean,]
library(dygraphs)
a <- as.xts.data.table(as.data.table(ch9data))
dygraph(a, main = "Canadian Employment Index: AR(2) forecasts") %>%
dyRangeSelector() %>%
dySeries(name = "caemp", label = "Actual") %>%
dySeries(c("hi","f", "lo"), label = "Predicted") %>%
dyLegend(show = "always", hideOnMouseOut = FALSE) %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesOpts = list(strokeWidth = 2)) %>%
dyOptions(axisLineColor = "navy", gridLineColor = "grey")
setwd("~/EC525S19/ProblemSets/PS01")
install.packages("highcharter")
library(highcharter)
library(forecast)
library(xts)
liq <- xts(estimation_data[,1], order.by=estimation_data[,2])
lsales <- xts(estimation_data[,3], order.by=estimation_data[,2])
load("C:/Users/MBA01/Downloads/ch10data.Rdata")
library(dplyr)
library(magrittr)
library(lubridate)
estimation_data <- ch10data %>%
filter(date > as.Date("1967-12-01") & date < as.Date("1994-12-01"))
estimation_data %<>% mutate(lsales = log(liquor))
y <- estimation_data$lsales
library(xts)
liq <- xts(estimation_data[,1], order.by=estimation_data[,2])
load("ch10data.Rdata")
setwd("~/ecn321/pages/Lectures")
load("ch10data.Rdata")
library(dplyr)
library(magrittr)
library(lubridate)
estimation_data <- ch10data %>%
filter(date > as.Date("1967-12-01") & date < as.Date("1994-12-01"))
estimation_data %<>% mutate(lsales = log(liquor))
y <- estimation_data$lsales
library(xts)
liq <- xts(estimation_data[,1], order.by=estimation_data[,2])
lsales <- xts(estimation_data[,3], order.by=estimation_data[,2])
highchart(type = "stock") %>%
hc_add_series(liq, color = "cornflowerblue") %>%
hc_yAxis(title = list(text = "Monthly liquor sell"),
labels = list(format = "${value}"),
opposite = FALSE) %>%
hc_add_theme(hc_theme_flat())
highchart(type = "stock") %>%
hc_add_series(lsales, color = "cornflowerblue") %>%
hc_yAxis(title = list(text = "Log of Monthly liquor sell"),
labels = list(format = "{value}"),
opposite = FALSE) %>%
hc_add_theme(hc_theme_flat())
auto.arima(lsales) %>%
forecast(h = 6) %>%
hchart() %>%
hc_title(text = "Oil historical and forecast") %>%
hc_yAxis(title = list(text = "monthly price"),
labels = list(format = "${value}"),
opposite = FALSE) %>%
hc_add_theme(hc_theme_flat()) %>%
hc_navigator(enabled = TRUE)
auto.arima(lsales) %>%
forecast(h = 6) %>%
hchart() %>%
hc_title(text = "Log of Monthly liquor sell") %>%
hc_yAxis(title = list(text = "monthly price"),
labels = list(format = "{value}"),
opposite = FALSE) %>%
hc_add_theme(hc_theme_flat()) %>%
hc_navigator(enabled = TRUE)
auto.arima(lsales) %>%
forecast(h = 6)
auto.arima(lsales) %>%
forecast(h = 6) %>%
hchart() %>%
hc_title(text = "Log of Monthly liquor sell") %>%
hc_yAxis(title = list(text = "monthly price"),
labels = list(format = "{value}"),
opposite = FALSE) %>%
hc_add_theme(hc_theme_flat())
time <- 1:length(y)
seasonal <- as.factor(month(estimation_data$date))
X <- cbind(time, time2 = time^2, model.matrix(~seasonal - 1))
reg <- arima(y, order = c(3, 0, 0), xreg = X, include.mean = FALSE)
summary(reg)
reg <- arima(y, order = c(3, 0, 0), xreg = X, include.mean = FALSE)
summary(reg)
load("C:/Users/MBA01/Downloads/ch10data.Rdata")
load("ch10data.Rdata")
library(dplyr)
library(magrittr)
library(lubridate)
library(forecast)
estimation_data <- ch10data %>%
filter(date > as.Date("1967-12-01") & date < as.Date("1994-12-01"))
estimation_data %<>% mutate(lsales = log(liquor))
plot(estimation_data$date, estimation_data$liquor, type="l")
plot(estimation_data$date, estimation_data$lsales, type="l")
y <- estimation_data$lsales
time <- 1:length(y)
seasonal <- as.factor(month(estimation_data$date))
X <- cbind(time, time2 = time^2, model.matrix(~seasonal - 1))
reg <- arima(y, order = c(3, 0, 0), xreg = X, include.mean = FALSE)
broom::tidy(reg)
reg1 <- Arima(y, order = c(3, 0, 0), xreg = X, include.mean = FALSE)
broom::tidy(reg1)
reg1 <- Arima(y, order = c(3, 0, 0), xreg = X, include.mean = FALSE)
broom::tidy(reg1)
forecast(reg1, h=1)
View(ch10data)
